package dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import connection.ConnectionFactory;
import model.BeneficiarioRecebe;

public class BeneficiarioRecebeDao {

    public void insert(BeneficiarioRecebe beneficiarioRecebe) throws SQLException {
        Connection conn = ConnectionFactory.getConnection();
        Statement statement = null;

        try {
            String query = "INSERT INTO BENEFICIARIORECEBE (ID_BENEFICIARIO, ID_RECURSO, VALOR) "
                         + "VALUES ('" + beneficiarioRecebe.getIdBeneficiario() + "', '" + beneficiarioRecebe.getIdRecurso() + "', "
                         + beneficiarioRecebe.getValor() + ")";

            statement = conn.createStatement();
            statement.executeUpdate(query);
        } catch (Exception e) {
            System.out.println("Erro ao inserir a relação BeneficiarioRecebe! - " + e);
            e.printStackTrace();
        } finally {
            if (statement != null) {
                statement.close();
            }
            conn.close();
        }
    }

    public List<BeneficiarioRecebe> getAll() throws SQLException {
        Connection conn = ConnectionFactory.getConnection();
        Statement statement = null;
        ResultSet rs = null;
        List<BeneficiarioRecebe> list = new ArrayList<>();

        try {
            String query = "SELECT * FROM BENEFICIARIORECEBE";

            statement = conn.createStatement();
            rs = statement.executeQuery(query);

            while (rs.next()) {
                BeneficiarioRecebe beneficiarioRecebe = new BeneficiarioRecebe();
                beneficiarioRecebe.setIdBeneficiario(rs.getInt("ID_BENEFICIARIO"));
                beneficiarioRecebe.setIdRecurso(rs.getInt("ID_RECURSO"));
                beneficiarioRecebe.setValor(rs.getDouble("VALOR"));

                list.add(beneficiarioRecebe);
            }
        } catch (Exception e) {
            System.out.println("Erro ao buscar as relações BeneficiarioRecebe! - " + e);
            e.printStackTrace();
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (statement != null) {
                statement.close();
            }
            conn.close();
        }

        return list;
    }

    public void delete(int idBeneficiario, int idRecurso) throws SQLException {
        Connection conn = ConnectionFactory.getConnection();
        Statement statement = null;

        try {
            String query = "DELETE FROM BENEFICIARIORECEBE WHERE ID_BENEFICIARIO = " + idBeneficiario + " AND ID_RECURSO = " + idRecurso;

            statement = conn.createStatement();
            statement.executeUpdate(query);
        } catch (Exception e) {
            System.out.println("Erro ao excluir a relação BeneficiarioRecebe! - " + e);
        } finally {
            if (statement != null) {
                statement.close();
            }
            conn.close();
        }
    }

    public void update(BeneficiarioRecebe beneficiarioRecebe) throws SQLException {
        Connection conn = ConnectionFactory.getConnection();
        Statement statement = null;

        try {
            String query = "UPDATE BENEFICIARIORECEBE SET VALOR = " + beneficiarioRecebe.getValor() 
                         + " WHERE ID_BENEFICIARIO = " + beneficiarioRecebe.getIdBeneficiario() 
                         + " AND ID_RECURSO = " + beneficiarioRecebe.getIdRecurso();

            statement = conn.createStatement();
            statement.executeUpdate(query);
        } catch (Exception e) {
            System.out.println("Erro ao atualizar a relação BeneficiarioRecebe! - " + e);
            e.printStackTrace();
        } finally {
            if (statement != null) {
                statement.close();
            }
            conn.close();
        }
    }
}
